<?php

/**
 * @file
 * FOIA Users Access Module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Validates Office NID matching for users.
 */
function _agency_user_nid_access($node, $account) {
  $user = User::load(\Drupal::currentUser()->id());
  // Get the user's Agency association.
  $user_agency = $user->get('field_agency')->target_id;
  // Get the node's Agency association.
  $node_agency = $node->get('field_agency')->target_id;

  if ($user_agency === $node_agency) {
    $result = AccessResult::allowed()
      ->cachePerUser()
      ->addCacheableDependency($node);
  }
  else {
    $result = AccessResult::forbidden()
      ->cachePerUser()
      ->addCacheableDependency($node);
  }

  return $result;
}

/**
 * Implements hook_node_access().
 */
function foia_users_node_access($node, $op, $account) {

  // Restrict editing node based on matching of 'field_agency' entity reference.
  if ($node->bundle() == 'agency_component') {
    // Get the current user's roles.
    $user = User::load(\Drupal::currentUser()->id());
    $user_roles = $user->getRoles();

    if (in_array("agency_manager", $user_roles)) {
      switch ($op) {
        case 'update':
          // Check if the user has the proper Agency association.
          return _agency_user_nid_access($node, $account);

        case 'delete':
          return AccessResult::forbidden()
            ->cachePerUser()
            ->addCacheableDependency($node);

        default:
          return AccessResult::neutral();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function foia_users_taxonomy_term_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Get the term ID.
  $term_id = $entity->id();
  // Get the current user's roles.
  $user = User::load(\Drupal::currentUser()->id());
  $user_roles = $user->getRoles();
  // Get the current user's agency.
  $user_agency = $user->get('field_agency')->target_id;

  if ($term_id === $user_agency && in_array('agency_manager', $user_roles)) {
    switch ($operation) {
      case 'update':
        return AccessResult::allowed()
          ->cachePerUser()
          ->addCacheableDependency($entity);

      case 'delete':
        return AccessResult::forbidden()
          ->cachePerUser()
          ->addCacheableDependency($entity);

      default:
        return AccessResult::neutral();
    }
  }
  return AccessResult::neutral();
}

/**
 * Custom submit handler for agency value.
 */
function _form_validation_foia_agency($form, $form_state) {
  if ($form_state->hasValue('field_agency')) {
    $role_array = [
      'foia_office_creator',
      'foia_office_reviewer',
      'agency_manager',
    ];
    $user_role = $form_state->getValue('roles');
    $user_agency = $form_state->getValue('field_agency')[0]['target_id'];
    $user_role_match = FALSE;
    if (is_array($user_role)) {
      $user_role_match = array_intersect($user_role, $role_array) ? TRUE : $user_role_match;
    }

    if (is_null($user_agency) && ($user_role_match)) {
      $form['field_agency']['widget']['#required'] = TRUE;
      $form_state->setErrorByName('field_agency', t('The roles "Agency Component creator", "Agency Component reviewer" and "Agency Manager" must be assigned to an agency.'));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function foia_users_form_alter(&$form, $form_state, $form_id) {
  // We are checking for the proper roles to make Foia office required.
  if ($form_id == ('user_form' || 'user_register_form')) {
    $form['#validate'][] = '_form_validation_foia_agency';
  }
}
